@page "/checkin-scanned"
@rendermode InteractiveAuto
@using IkeaDocuScan.Shared.DTOs.ScannedFiles
@using IkeaDocuScan.Shared.Interfaces
@inject IScannedFileService ScannedFileService
@inject NavigationManager Navigation
@inject ILogger<CheckinScanned> Logger

<PageTitle>Check-in Scanned Documents</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1><i class="fa fa-folder-open"></i> Check-in Scanned Documents</h1>
            <p class="text-muted">Select a scanned file to check-in to the document management system</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-outline-secondary" @onclick="RefreshFileList" disabled="@isLoading">
                <i class="fa @(isLoading ? "fa-spinner fa-spin" : "fa-sync")"></i> Refresh
            </button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fa fa-exclamation-circle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading scanned files...</p>
        </div>
    }
    else if (files == null || files.Count == 0)
    {
        <div class="alert alert-info">
            <h4><i class="fa fa-info-circle"></i> No Scanned Files Found</h4>
            <p>There are no files in the scanned documents folder.</p>
            <p class="mb-0"><small>Configure the folder path in application settings: <code>IkeaDocuScan:ScannedFilesPath</code></small></p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fa fa-search"></i></span>
                            <input type="text" class="form-control" placeholder="Search files..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterFiles">
                        </div>
                    </div>
                    <div class="col-md-6 text-end">
                        <span class="badge bg-secondary fs-6">@filteredFiles.Count file(s)</span>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th style="width: 50px;"></th>
                                <th style="cursor: pointer;" @onclick='() => SortBy("FileName")'>
                                    File Name
                                    @if (sortColumn == "FileName")
                                    {
                                        <i class="fa @(sortAscending ? "fa-sort-up" : "fa-sort-down")"></i>
                                    }
                                </th>
                                <th style="width: 120px; cursor: pointer;" @onclick='() => SortBy("Size")'>
                                    Size
                                    @if (sortColumn == "Size")
                                    {
                                        <i class="fa @(sortAscending ? "fa-sort-up" : "fa-sort-down")"></i>
                                    }
                                </th>
                                <th style="width: 180px; cursor: pointer;" @onclick='() => SortBy("Modified")'>
                                    Modified
                                    @if (sortColumn == "Modified")
                                    {
                                        <i class="fa @(sortAscending ? "fa-sort-up" : "fa-sort-down")"></i>
                                    }
                                </th>
                                <th style="width: 150px;">Type</th>
                                <th style="width: 150px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in GetPagedFiles())
                            {
                                <tr class="@(selectedFile?.FileName == file.FileName ? "table-primary" : "")"
                                    @onclick="() => SelectFile(file)"
                                    style="cursor: pointer;">
                                    <td class="text-center">
                                        <i class="@file.GetIconClass() fa-2x"></i>
                                    </td>
                                    <td>
                                        <strong>@file.FileName</strong>
                                    </td>
                                    <td>@file.SizeFormatted</td>
                                    <td>@file.ModifiedDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge bg-info">@file.FileType</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary" @onclick="() => ViewDetails(file)" @onclick:stopPropagation="true">
                                            <i class="fa fa-eye"></i> View
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (filteredFiles.Count > pageSize)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var pageI = i;
                                <li class="page-item @(currentPage == pageI ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(pageI)">@pageI</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                }

                @if (selectedFile != null)
                {
                    <div class="alert alert-success mt-3">
                        <i class="fa fa-check-circle"></i> Selected: <strong>@selectedFile.FileName</strong>
                        <button class="btn btn-sm btn-success float-end" @onclick="() => ViewDetails(selectedFile)">
                            <i class="fa fa-arrow-right"></i> Proceed to Check-in
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<ScannedFileDto> files = new();
    private List<ScannedFileDto> filteredFiles = new();
    private ScannedFileDto? selectedFile;
    private bool isLoading = true;
    private string? errorMessage;
    private string searchTerm = string.Empty;
    private string sortColumn = "Modified";
    private bool sortAscending = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredFiles.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadFiles();
    }

    private async Task LoadFiles()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            Logger.LogInformation("Loading scanned files");
            files = await ScannedFileService.GetScannedFilesAsync();
            filteredFiles = files.ToList();

            // Apply default sorting
            SortFiles();

            Logger.LogInformation("Loaded {Count} scanned files", files.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scanned files");
            errorMessage = $"Error loading files: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshFileList()
    {
        selectedFile = null;
        currentPage = 1;
        await LoadFiles();
    }

    private void FilterFiles()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredFiles = files.ToList();
        }
        else
        {
            var term = searchTerm.ToLowerInvariant();
            filteredFiles = files.Where(f =>
                f.FileName.ToLowerInvariant().Contains(term) ||
                f.FileType.ToLowerInvariant().Contains(term)
            ).ToList();
        }

        SortFiles();
        currentPage = 1;
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        SortFiles();
    }

    private void SortFiles()
    {
        filteredFiles = sortColumn switch
        {
            "FileName" => sortAscending
                ? filteredFiles.OrderBy(f => f.FileName).ToList()
                : filteredFiles.OrderByDescending(f => f.FileName).ToList(),
            "Size" => sortAscending
                ? filteredFiles.OrderBy(f => f.SizeBytes).ToList()
                : filteredFiles.OrderByDescending(f => f.SizeBytes).ToList(),
            "Modified" => sortAscending
                ? filteredFiles.OrderBy(f => f.ModifiedDate).ToList()
                : filteredFiles.OrderByDescending(f => f.ModifiedDate).ToList(),
            _ => filteredFiles
        };
    }

    private List<ScannedFileDto> GetPagedFiles()
    {
        return filteredFiles
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void SelectFile(ScannedFileDto file)
    {
        selectedFile = file;
        Logger.LogInformation("Selected file: {FileName}", file.FileName);
    }

    private void ViewDetails(ScannedFileDto file)
    {
        Logger.LogInformation("Navigating to file details: {FileName}", file.FileName);
        Navigation.NavigateTo($"/checkin-scanned/detail/{Uri.EscapeDataString(file.FileName)}");
    }
}
