@page "/checkin-scanned/detail/{FileName}"
@rendermode InteractiveAuto
@attribute [Authorize(Policy = "HasAccess")]
@using IkeaDocuScan.Shared.DTOs.ScannedFiles
@using IkeaDocuScan.Shared.Interfaces
@using IkeaDocuScan.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@inject IScannedFileService ScannedFileService
@inject IAuditTrailService AuditTrailService
@inject NavigationManager Navigation
@inject ILogger<CheckinFileDetail> Logger
@inject IJSRuntime JS

<PageTitle>File Details - @FileName</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/checkin-scanned" style="cursor: pointer;">
                            <i class="fa fa-folder-open"></i> Scanned Files
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@FileName</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fa fa-exclamation-circle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fa fa-check-circle"></i> @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading file details...</p>
        </div>
    }
    else if (file == null)
    {
        <div class="alert alert-warning">
            <h4><i class="fa fa-exclamation-triangle"></i> File Not Found</h4>
            <p>The requested file could not be found.</p>
            <button class="btn btn-primary" @onclick="GoBack">
                <i class="fa fa-arrow-left"></i> Back to File List
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Left Column: File Preview -->
            <div class="col-lg-8">
                <div class="card mb-3">
                    <div class="card-header bg-dark text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="fa fa-eye"></i> File Preview</h5>
                            @if ((file.Extension.ToLower() == ".pdf" || IsImageFile(file.Extension)) && !previewError)
                            {
                                <button class="btn btn-sm btn-light" @onclick="ToggleFullScreen" title="Full Screen">
                                    <i class="fa @(isFullScreen ? "fa-compress" : "fa-expand")"></i>
                                    @(isFullScreen ? "Exit Full Screen" : "Full Screen")
                                </button>
                            }
                        </div>
                    </div>
                    <div class="card-body" style="min-height: 500px; background-color: #f5f5f5; padding: 0;" id="preview-container">
                        @* File Size Warning *@
                        @if (file.SizeBytes > 10 * 1024 * 1024 && !previewError)
                        {
                            <div class="alert alert-warning m-3 mb-0">
                                <i class="fa fa-exclamation-triangle"></i>
                                <strong>Large File:</strong> This file is @file.SizeFormatted.
                                Loading may take a moment depending on your connection speed.
                            </div>
                        }

                        @* Loading Spinner *@
                        @if (isLoadingPreview && !previewError)
                        {
                            <div class="text-center p-5" style="position: absolute; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; background-color: rgba(255,255,255,0.9); z-index: 10;">
                                <div>
                                    <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                                        <span class="visually-hidden">Loading preview...</span>
                                    </div>
                                    <p class="mt-3 text-muted">Loading preview...</p>
                                    @if (file.SizeBytes > 5 * 1024 * 1024)
                                    {
                                        <p class="text-muted"><small>File size: @file.SizeFormatted</small></p>
                                    }
                                </div>
                            </div>
                        }

                        @* Error Display *@
                        @if (previewError)
                        {
                            <div class="alert alert-danger m-3 text-center" style="margin-top: 200px !important;">
                                <i class="fa fa-exclamation-circle fa-3x mb-3"></i>
                                <h5>Preview Error</h5>
                                <p>Unable to load the file preview. The file may be corrupted or in an unsupported format.</p>
                                <p class="mb-3"><strong>File:</strong> @file.FileName (@file.SizeFormatted)</p>
                                <div>
                                    <button class="btn btn-primary me-2" @onclick="RetryPreview">
                                        <i class="fa fa-refresh"></i> Retry
                                    </button>
                                    <button class="btn btn-secondary" @onclick="DownloadFile">
                                        <i class="fa fa-download"></i> Download File
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            @* PDF Preview *@
                            @if (file.Extension.ToLower() == ".pdf")
                            {
                                <iframe
                                    id="pdf-preview-iframe"
                                    src="/api/scannedfiles/@Uri.EscapeDataString(file.FileName)/stream"
                                    style="width: 100%; height: 700px; border: none; display: @(isLoadingPreview ? "none" : "block");"
                                    title="PDF Preview - @file.FileName"
                                    @onload="OnPreviewLoaded"
                                    @onerror="OnPreviewError">
                                </iframe>
                            }
                            @* Image Preview *@
                            else if (IsImageFile(file.Extension))
                            {
                                <div class="text-center p-3">
                                    <img
                                        id="image-preview"
                                        src="/api/scannedfiles/@Uri.EscapeDataString(file.FileName)/stream"
                                        alt="@file.FileName"
                                        style="max-width: 100%; max-height: 700px; object-fit: contain; display: @(isLoadingPreview ? "none" : "block");"
                                        class="img-fluid"
                                        @onload="OnPreviewLoaded"
                                        @onerror="OnPreviewError" />
                                    @if (!isLoadingPreview)
                                    {
                                        <p class="mt-2 text-muted"><small>@file.FileName</small></p>
                                    }
                                </div>
                            }
                            @* Unsupported File Type *@
                            else
                            {
                                <div class="alert alert-secondary m-3 text-center" style="margin-top: 200px !important;">
                                    <i class="@file.GetIconClass() fa-5x"></i>
                                    <p class="mt-3"><strong>@file.FileName</strong></p>
                                    <p>Preview not available for this file type</p>
                                    <p class="text-muted"><small>Supported preview formats: PDF, JPG, JPEG, PNG, BMP, TIF, TIFF</small></p>
                                    <button class="btn btn-primary mt-3" @onclick="DownloadFile">
                                        <i class="fa fa-download"></i> Download File
                                    </button>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <!-- Right Column: File Information & Actions -->
            <div class="col-lg-4">
                <!-- File Information Card -->
                <div class="card mb-3">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0"><i class="fa fa-info-circle"></i> File Information</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-sm">
                            <tbody>
                                <tr>
                                    <td><strong>File Name:</strong></td>
                                    <td>@file.FileName</td>
                                </tr>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td><span class="badge bg-info">@file.FileType</span></td>
                                </tr>
                                <tr>
                                    <td><strong>Size:</strong></td>
                                    <td>@file.SizeFormatted</td>
                                </tr>
                                <tr>
                                    <td><strong>Created:</strong></td>
                                    <td>@file.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                                <tr>
                                    <td><strong>Modified:</strong></td>
                                    <td>@file.ModifiedDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                                <tr>
                                    <td><strong>Extension:</strong></td>
                                    <td><code>@file.Extension</code></td>
                                </tr>
                                <tr>
                                    <td colspan="2">
                                        <strong>Debug Info:</strong><br />
                                        <small class="text-muted" style="word-break: break-all;">
                                            URL: /api/scannedfiles/@Uri.EscapeDataString(file.FileName)/stream
                                        </small>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Actions Card -->
                <div class="card mb-3">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="fa fa-tasks"></i> Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-success btn-lg" @onclick="CheckInDocument" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                else
                                {
                                    <i class="fa fa-check me-2"></i>
                                }
                                Check-in Document
                            </button>

                            <button class="btn btn-outline-primary" @onclick="DownloadFile" disabled="@isProcessing">
                                <i class="fa fa-download"></i> Download
                            </button>

                            <button class="btn btn-outline-secondary" @onclick="GoBack">
                                <i class="fa fa-arrow-left"></i> Back to List
                            </button>
                        </div>

                        <hr />

                        <div class="alert alert-warning mb-0">
                            <small>
                                <i class="fa fa-info-circle"></i>
                                Checking in this file will create a new document record in the system and log the action.
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string FileName { get; set; } = string.Empty;

    private ScannedFileDto? file;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;

    // Preview enhancement states
    private bool isLoadingPreview = true;
    private bool previewError = false;
    private bool isFullScreen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadFileDetails();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && file != null)
        {
            // Start showing loading spinner for preview
            isLoadingPreview = true;
            StateHasChanged();
        }
    }

    private async Task LoadFileDetails()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var decodedFileName = Uri.UnescapeDataString(FileName);
            Logger.LogInformation("Loading file details for: {FileName}", decodedFileName);

            file = await ScannedFileService.GetFileByNameAsync(decodedFileName);

            if (file == null)
            {
                Logger.LogWarning("File not found: {FileName}", decodedFileName);
                errorMessage = "File not found";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading file details: {FileName}", FileName);
            errorMessage = $"Error loading file: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckInDocument()
    {
        if (file == null) return;

        try
        {
            isProcessing = true;
            errorMessage = null;
            successMessage = null;

            Logger.LogInformation("Checking in file: {FileName}", file.FileName);

            // TODO: Implement actual document check-in logic
            // This should:
            // 1. Create a new Document record
            // 2. Copy or move the file to the document storage
            // 3. Generate a barcode
            // 4. Log the check-in action

            // For now, just log the check-in action
            await AuditTrailService.LogAsync(
                AuditAction.CheckIn,
                "TEMP-" + DateTime.Now.Ticks.ToString(), // Temporary barcode
                $"File checked in: {file.FileName} ({file.SizeFormatted})"
            );

            successMessage = $"File '{file.FileName}' has been checked in successfully!";
            Logger.LogInformation("File checked in successfully: {FileName}", file.FileName);

            // Wait a moment to show the success message
            await Task.Delay(2000);

            // Navigate back to the list or to the documents page
            Navigation.NavigateTo("/documents");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking in file: {FileName}", file.FileName);
            errorMessage = $"Error checking in file: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DownloadFile()
    {
        if (file == null) return;

        try
        {
            Logger.LogInformation("Download requested for file: {FileName}", file.FileName);

            // Use JSInterop to trigger download
            var downloadUrl = $"/api/scannedfiles/{Uri.EscapeDataString(file.FileName)}/stream";
            await JS.InvokeVoidAsync("open", downloadUrl, "_blank");

            Logger.LogInformation("Download initiated for file: {FileName}", file.FileName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading file: {FileName}", file.FileName);
            errorMessage = $"Error downloading file: {ex.Message}";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/checkin-scanned");
    }

    // Preview enhancement methods
    private void OnPreviewLoaded()
    {
        isLoadingPreview = false;
        previewError = false;
        Logger.LogInformation("Preview loaded successfully for: {FileName}", file?.FileName);
        StateHasChanged();
    }

    private void OnPreviewError()
    {
        isLoadingPreview = false;
        previewError = true;
        Logger.LogError("Preview failed to load for: {FileName}", file?.FileName);
        StateHasChanged();
    }

    private void RetryPreview()
    {
        previewError = false;
        isLoadingPreview = true;
        StateHasChanged();
    }

    private async Task ToggleFullScreen()
    {
        try
        {
            isFullScreen = await JS.InvokeAsync<bool>("filePreview.toggleFullScreen", "preview-container");
            Logger.LogInformation("Full screen toggled: {IsFullScreen}", isFullScreen);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling full screen");
            errorMessage = "Full screen mode is not supported in your browser.";
        }
    }

    [JSInvokable]
    public void OnFullscreenChanged(bool isFullscreen)
    {
        isFullScreen = isFullscreen;
        StateHasChanged();
    }

    private bool IsImageFile(string extension)
    {
        var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".bmp", ".tif", ".tiff" };
        return imageExtensions.Contains(extension.ToLowerInvariant());
    }
}

