@page "/documents"
@rendermode InteractiveAuto
@attribute [Authorize(Policy = "HasAccess")]
@using IkeaDocuScan.Shared.DTOs.Documents
@using IkeaDocuScan.Shared.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@inject IDocumentService DocumentService
@inject NavigationManager Navigation
@inject ILogger<Documents> Logger
@implements IAsyncDisposable

<PageTitle>Documents</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Documents Management</h1>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateDialog">
                <span>âž•</span> Create New Document
            </button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (successMessage != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    @if (documents == null)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading documents...</p>
        </div>
    }
    else if (documents.Count == 0)
    {
        <div class="alert alert-info">
            <h4>No documents found</h4>
            <p>Click "Create New Document" to add your first document.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>BarCode</th>
                        <th>Name</th>
                        <th>Document Type</th>
                        <th>Counter Party</th>
                        <th>Date of Contract</th>
                        <th>Created By</th>
                        <th>Created On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doc in documents)
                    {
                        <tr>
                            <td>@doc.Id</td>
                            <td><strong>@doc.BarCode</strong></td>
                            <td>@doc.Name</td>
                            <td>@doc.DocumentTypeName</td>
                            <td>@doc.CounterPartyName</td>
                            <td>@doc.DateOfContract?.ToShortDateString()</td>
                            <td>@doc.CreatedBy</td>
                            <td>@doc.CreatedOn.ToLocalTime().ToString("g")</td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => EditDocument(doc)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteDocument(doc.Id, doc.Name)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="text-muted">
                Total: @documents.Count document(s)
            </div>
        </div>
    }
</div>

@code {
    private List<DocumentDto>? documents;
    private HubConnection? hubConnection;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load initial data
            Logger.LogInformation("Loading documents");
            documents = await DocumentService.GetAllAsync();

            // Setup SignalR for real-time updates
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hubs/data-updates"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<DocumentDto>("DocumentCreated", (doc) =>
            {
                Logger.LogInformation("Document created via SignalR: {DocumentId}", doc.Id);
                documents?.Add(doc);
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<DocumentDto>("DocumentUpdated", (doc) =>
            {
                Logger.LogInformation("Document updated via SignalR: {DocumentId}", doc.Id);
                var existing = documents?.FirstOrDefault(d => d.Id == doc.Id);
                if (existing != null)
                {
                    var index = documents!.IndexOf(existing);
                    documents[index] = doc;
                    InvokeAsync(StateHasChanged);
                }
            });

            hubConnection.On<int>("DocumentDeleted", (id) =>
            {
                Logger.LogInformation("Document deleted via SignalR: {DocumentId}", id);
                var doc = documents?.FirstOrDefault(d => d.Id == id);
                if (doc != null)
                {
                    documents?.Remove(doc);
                    InvokeAsync(StateHasChanged);
                }
            });

            await hubConnection.StartAsync();
            Logger.LogInformation("SignalR connection established");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing documents page");
            errorMessage = $"Error loading documents: {ex.Message}";
        }
    }

    private void ShowCreateDialog()
    {
        // Navigate to register page
        Navigation.NavigateTo("/documents/register");
    }

    private void EditDocument(DocumentDto doc)
    {
        // Navigate to edit page using barcode
        Navigation.NavigateTo($"/documents/edit/{doc.BarCode}");
    }

    private async Task DeleteDocument(int id, string name)
    {
        // Note: In a real app, you'd want a proper confirmation dialog
        // For now, we'll use browser's confirm which requires JSInterop
        try
        {
            errorMessage = null;
            successMessage = null;

            await DocumentService.DeleteAsync(id);
            successMessage = $"Document '{name}' deleted successfully";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting document {DocumentId}", id);
            errorMessage = $"Error deleting document: {ex.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
