@page "/country-administration"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@attribute [Authorize(Policy = "HasAccess")]
@using IkeaDocuScan.Shared.DTOs.Countries
@using IkeaDocuScan.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject ICountryService CountryService
@inject ILogger<CountryAdministration> Logger

<PageTitle>Country Administration</PageTitle>

<div class="container-fluid mt-4">
    <div class="bg-light p-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h1 class="mb-0">Country Administration</h1>
                <p class="text-muted mb-0">Manage country codes and names</p>
            </div>
            <button class="btn btn-primary" @onclick="OpenCreateModal">
                <i class="fa fa-plus me-2"></i>Add New Country
            </button>
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        <div class="card mt-4">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <h5 class="mb-0">Countries (@(filteredCountries?.Count ?? 0)@(filteredCountries?.Count != countries?.Count ? $" of {countries?.Count ?? 0}" : ""))</h5>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-search"></i>
                            </span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Search by code or name..."
                                   @bind="searchTerm"
                                   @bind:event="oninput"
                                   @bind:after="ApplyFilter" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                                    <i class="fa fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading countries...</p>
                    </div>
                }
                else if (filteredCountries != null && filteredCountries.Count > 0)
                {
                    <div class="table-responsive">
                        <table class="table table-hover table-striped">
                            <thead class="table-light">
                                <tr>
                                    <th style="cursor: pointer;" @onclick="() => SortBy(nameof(CountryDto.CountryCode))">
                                        Country Code
                                        @if (sortColumn == nameof(CountryDto.CountryCode))
                                        {
                                            <i class="fa @(sortAscending ? "fa-sort-asc" : "fa-sort-desc")"></i>
                                        }
                                    </th>
                                    <th style="cursor: pointer;" @onclick="() => SortBy(nameof(CountryDto.Name))">
                                        Name
                                        @if (sortColumn == nameof(CountryDto.Name))
                                        {
                                            <i class="fa @(sortAscending ? "fa-sort-asc" : "fa-sort-desc")"></i>
                                        }
                                    </th>
                                    <th style="width: 200px;">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var country in filteredCountries)
                                {
                                    <tr>
                                        <td><strong>@country.CountryCode</strong></td>
                                        <td>@country.Name</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => OpenEditModal(country)">
                                                <i class="fa fa-edit"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteModal(country)">
                                                <i class="fa fa-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (!string.IsNullOrEmpty(searchTerm))
                {
                    <div class="alert alert-warning">
                        No countries found matching "@searchTerm". <button class="btn btn-link p-0" @onclick="ClearSearch">Clear search</button>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        No countries found. Click "Add New Country" to create one.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* Create/Edit Modal *@
<div class="modal fade @(showEditModal ? "show d-block" : "")"
     tabindex="-1"
     style="@(showEditModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditMode ? "Edit Country" : "Create New Country")</h5>
                <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(modalErrorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @modalErrorMessage
                        <button type="button" class="btn-close" @onclick="() => modalErrorMessage = null"></button>
                    </div>
                }

                @if (isEditMode && editDto != null)
                {
                    <div class="mb-3">
                        <label class="form-label">Country Code</label>
                        <input type="text" class="form-control" value="@selectedCountry?.CountryCode" disabled />
                        <small class="text-muted">Country code cannot be changed</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="editDto.Name" maxlength="128" />
                    </div>
                }
                else if (!isEditMode && createDto != null)
                {
                    <div class="mb-3">
                        <label class="form-label">Country Code <span class="text-danger">*</span></label>
                        <input type="text" class="form-control text-uppercase" @bind="createDto.CountryCode" maxlength="2" placeholder="US" />
                        <small class="text-muted">2-letter ISO 3166-1 alpha-2 code (e.g., US, GB, DE)</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" @bind="createDto.Name" maxlength="128" placeholder="United States" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveCountry" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="fa fa-save me-2"></i>
                    }
                    @(isEditMode ? "Update" : "Create")
                </button>
            </div>
        </div>
    </div>
</div>

@* Delete Confirmation Modal *@
<div class="modal fade @(showDeleteModal ? "show d-block" : "")"
     tabindex="-1"
     style="@(showDeleteModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(modalErrorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @modalErrorMessage
                        <button type="button" class="btn-close" @onclick="() => modalErrorMessage = null"></button>
                    </div>
                }

                @if (isCheckingUsage)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Checking...</span>
                        </div>
                        <p class="mt-2">Checking country usage...</p>
                    </div>
                }
                else if (deleteCounterPartyCount > 0 || deleteUserPermissionCount > 0)
                {
                    <div class="alert alert-warning">
                        <i class="fa fa-exclamation-triangle me-2"></i>
                        <strong>Warning: Country is in use!</strong>
                        <p class="mb-0 mt-2">
                            Country <strong>@selectedCountry?.CountryCode</strong> is currently used by:
                        </p>
                        <ul class="mt-2 mb-0">
                            @if (deleteCounterPartyCount > 0)
                            {
                                <li><strong>@deleteCounterPartyCount</strong> counter part@(deleteCounterPartyCount != 1 ? "ies" : "y")</li>
                            }
                            @if (deleteUserPermissionCount > 0)
                            {
                                <li><strong>@deleteUserPermissionCount</strong> user permission@(deleteUserPermissionCount != 1 ? "s" : "")</li>
                            }
                        </ul>
                        <p class="mb-0 mt-2">
                            You must remove or update all references before this country can be deleted.
                        </p>
                    </div>
                }
                else
                {
                    <p>Are you sure you want to delete the country <strong>@selectedCountry?.CountryCode - @selectedCountry?.Name</strong>?</p>
                    <p class="text-muted mb-0">This action cannot be undone.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                @if ((deleteCounterPartyCount == 0 && deleteUserPermissionCount == 0) && !isCheckingUsage)
                {
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="fa fa-trash me-2"></i>
                        }
                        Delete
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<CountryDto>? countries;
    private List<CountryDto>? filteredCountries;
    private string searchTerm = string.Empty;
    private string sortColumn = nameof(CountryDto.CountryCode);
    private bool sortAscending = true;
    private bool isLoading = false;
    private bool isSaving = false;
    private bool isCheckingUsage = false;
    private string? errorMessage;
    private string? successMessage;
    private string? modalErrorMessage;

    // Edit/Create modal
    private bool showEditModal = false;
    private bool isEditMode = false;
    private CountryDto? selectedCountry;
    private CreateCountryDto? createDto;
    private UpdateCountryDto? editDto;

    // Delete modal
    private bool showDeleteModal = false;
    private int deleteCounterPartyCount = 0;
    private int deleteUserPermissionCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            countries = await CountryService.GetAllAsync();
            ApplyFilter();
            Logger.LogInformation("Loaded {Count} countries", countries.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading countries");
            errorMessage = $"Error loading countries: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilter()
    {
        if (countries == null)
        {
            filteredCountries = null;
            return;
        }

        // Apply search filter
        IEnumerable<CountryDto> filtered;
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = countries;
        }
        else
        {
            var search = searchTerm.Trim().ToLowerInvariant();
            filtered = countries
                .Where(c =>
                    c.CountryCode.ToLowerInvariant().Contains(search) ||
                    (c.Name?.ToLowerInvariant().Contains(search) ?? false));
        }

        // Apply sorting
        filtered = sortColumn switch
        {
            nameof(CountryDto.CountryCode) => sortAscending
                ? filtered.OrderBy(c => c.CountryCode)
                : filtered.OrderByDescending(c => c.CountryCode),
            nameof(CountryDto.Name) => sortAscending
                ? filtered.OrderBy(c => c.Name)
                : filtered.OrderByDescending(c => c.Name),
            _ => filtered.OrderBy(c => c.CountryCode)
        };

        filteredCountries = filtered.ToList();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilter();
    }

    private void OpenCreateModal()
    {
        isEditMode = false;
        selectedCountry = null;
        createDto = new CreateCountryDto();
        editDto = null;
        showEditModal = true;
        errorMessage = null;
        successMessage = null;
        modalErrorMessage = null;
    }

    private void OpenEditModal(CountryDto country)
    {
        isEditMode = true;
        selectedCountry = country;
        createDto = null;
        editDto = new UpdateCountryDto
        {
            Name = country.Name ?? string.Empty
        };
        showEditModal = true;
        errorMessage = null;
        successMessage = null;
        modalErrorMessage = null;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedCountry = null;
        createDto = null;
        editDto = null;
        modalErrorMessage = null;
    }

    private async Task OpenDeleteModal(CountryDto country)
    {
        selectedCountry = country;
        showDeleteModal = true;
        isCheckingUsage = true;
        deleteCounterPartyCount = 0;
        deleteUserPermissionCount = 0;
        errorMessage = null;
        successMessage = null;
        modalErrorMessage = null;
        StateHasChanged();

        try
        {
            (deleteCounterPartyCount, deleteUserPermissionCount) = await CountryService.GetUsageCountAsync(country.CountryCode);
            Logger.LogInformation("Country {Code} is used by {CounterPartyCount} counter parties and {UserPermissionCount} user permissions",
                country.CountryCode, deleteCounterPartyCount, deleteUserPermissionCount);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking country usage");
            errorMessage = $"Error checking country usage: {ex.Message}";
        }
        finally
        {
            isCheckingUsage = false;
            StateHasChanged();
        }
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        selectedCountry = null;
        deleteCounterPartyCount = 0;
        deleteUserPermissionCount = 0;
        modalErrorMessage = null;
    }

    private async Task SaveCountry()
    {
        try
        {
            isSaving = true;
            modalErrorMessage = null;
            StateHasChanged();

            if (isEditMode && editDto != null && selectedCountry != null)
            {
                await CountryService.UpdateAsync(selectedCountry.CountryCode, editDto);
                successMessage = $"Country {selectedCountry.CountryCode} updated successfully";
                Logger.LogInformation("Updated country {Code}", selectedCountry.CountryCode);
                CloseEditModal();
                await LoadCountries();
            }
            else if (!isEditMode && createDto != null)
            {
                await CountryService.CreateAsync(createDto);
                successMessage = $"Country {createDto.CountryCode} created successfully";
                Logger.LogInformation("Created country {Code}", createDto.CountryCode);
                CloseEditModal();
                await LoadCountries();
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP error saving country");
            modalErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving country");
            modalErrorMessage = $"Error saving country: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        if (selectedCountry == null) return;

        try
        {
            isSaving = true;
            modalErrorMessage = null;
            StateHasChanged();

            await CountryService.DeleteAsync(selectedCountry.CountryCode);
            successMessage = $"Country {selectedCountry.CountryCode} deleted successfully";
            Logger.LogInformation("Deleted country {Code}", selectedCountry.CountryCode);

            CloseDeleteModal();
            await LoadCountries();
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "HTTP error deleting country");
            modalErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting country");
            modalErrorMessage = $"Error deleting country: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void SortBy(string columnName)
    {
        if (sortColumn == columnName)
        {
            // Toggle sort direction if clicking same column
            sortAscending = !sortAscending;
        }
        else
        {
            // New column, default to ascending
            sortColumn = columnName;
            sortAscending = true;
        }

        ApplyFilter();
    }
}
