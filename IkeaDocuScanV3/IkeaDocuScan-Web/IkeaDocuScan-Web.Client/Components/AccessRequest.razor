@using IkeaDocuScan.Shared.Interfaces
@using IkeaDocuScan.Shared.DTOs.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject ICurrentUserService CurrentUserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Request System Access</h5>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrWhiteSpace(resultMessage))
        {
            <div class="alert @(requestSuccess ? "alert-success" : "alert-danger")">
                @resultMessage
            </div>
        }

        @if (!requestSuccess)
        {
            <p>
                Use this form to request access to the IKEA DocuScan system.
                Your request will be sent to the system administrators for review.
            </p>

            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <input
                    type="text"
                    id="username"
                    class="form-control"
                    value="@username"
                    disabled />
            </div>

            <div class="mb-3">
                <label for="reason" class="form-label">
                    Reason for access request (optional):
                </label>
                <textarea
                    id="reason"
                    class="form-control"
                    rows="4"
                    @bind="reason"
                    placeholder="Please describe why you need access to this system, your role, and what documents you need to work with...">
                </textarea>
                <small class="form-text text-muted">
                    Providing a clear reason will help administrators process your request faster.
                </small>
            </div>

            <button
                class="btn btn-primary"
                @onclick="RequestAccess"
                disabled="@isProcessing">
                @if (isProcessing)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Submitting Request...</span>
                }
                else
                {
                    <i class="fas fa-paper-plane"></i>
                    <span>Submit Access Request</span>
                }
            </button>
        }
        else
        {
            <div class="text-center py-3">
                <i class="fas fa-check-circle text-success" style="font-size: 3rem;"></i>
                <h5 class="mt-3">Request Submitted Successfully</h5>
                <p class="text-muted">
                    An administrator will review your request and grant permissions if approved.
                </p>
            </div>
        }
    </div>
</div>

@code {
    private string? username;
    private string reason = string.Empty;
    private bool isProcessing = false;
    private string? resultMessage;
    private bool requestSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity?.Name;
    }

    private async Task RequestAccess()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            resultMessage = "Unable to determine your username. Please contact your administrator directly.";
            return;
        }

        isProcessing = true;
        resultMessage = null;

        try
        {
            var result = await CurrentUserService.RequestAccessAsync(username, reason);

            requestSuccess = result.Success;
            resultMessage = result.Message;

            if (result.Success)
            {
                // Clear the form
                reason = string.Empty;
            }
        }
        catch (Exception ex)
        {
            requestSuccess = false;
            resultMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }
}
