@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared
@using IkeaDocuScan.Shared.DTOs.Documents
@using IkeaDocuScan.Shared.DTOs.DocumentNames
@using IkeaDocuScan.Shared.DTOs.Currencies
@using IkeaDocuScan.Shared.Interfaces
@inject ILogger<AdditionalInfoFields> Logger
@inject IDocumentNameService DocumentNameService

@* Document Name *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Document Name</label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.DocumentNameId" @bind:after="OnFieldChanged" disabled="@IsReadOnly">
            <option value="">-- Select Document Name --</option>
            @foreach (var docName in documentNames)
            {
                <option value="@docName.Id">@docName.Name</option>
            }
        </select>
        @if (isLoadingDocumentNames)
        {
            <small class="text-muted">Loading document names...</small>
        }
        else if (Model.DocumentTypeId.HasValue && !documentNames.Any())
        {
            <small class="text-muted">No document names available for this type</small>
        }
    </div>
</div>

@* Document No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Document No.
        @if (Model.IsFieldMandatory("DocumentNo"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.DocumentNo"
               @bind:after="OnFieldChanged"
               maxlength="255"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("DocumentNo"))"
               placeholder="Enter document number" />
    </div>
</div>

@* Version No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Version No.
        @if (Model.IsFieldMandatory("VersionNo"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.VersionNo"
               @bind:after="OnFieldChanged"
               maxlength="255"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("VersionNo"))"
               placeholder="Enter version number" />
    </div>
</div>

@* Associated to PUA/Agreement No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Assoc. to PUA/Agr. No.
        @if (Model.IsFieldMandatory("AssociatedToPua"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.AssociatedToPUA"
               @bind:after="OnFieldChanged"
               maxlength="255"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("AssociatedToPua"))"
               placeholder="Enter PUA/Agreement number" />
    </div>
</div>

@* Associated to Appendix No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Assoc. to Appendix No.
        @if (Model.IsFieldMandatory("AssociatedToAppendix"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.AssociatedToAppendix"
               @bind:after="OnFieldChanged"
               maxlength="255"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("AssociatedToAppendix"))"
               placeholder="Enter appendix number" />
    </div>
</div>

@* Valid Until/As Of *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Valid Until/As Of
        @if (Model.IsFieldMandatory("ValidUntil"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ValidUntil"
                           @bind-Value:after="OnFieldChanged"
                           Disabled="@(IsReadOnly || Model.IsFieldDisabled("ValidUntil"))"
                           Label="Valid Until/As Of"
                           Class="compact-date" />
    </div>
</div>

@* Amount *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Amount
        @if (Model.IsFieldMandatory("Amount"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="number"
               class="form-control"
               style="max-width: 10em;"
               @bind="Model.Amount"
               @bind:after="OnFieldChanged"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("Amount"))"
               placeholder="0.00"
               step="0.01" />
        <small class="text-muted">If Amount is entered, Currency must be selected</small>
    </div>
</div>

@* Currency *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Currency
        @if (Model.Amount.HasValue || Model.IsFieldMandatory("Currency"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.CurrencyCode" @bind:after="OnFieldChanged" disabled="@(IsReadOnly || Model.IsFieldDisabled("Currency"))">
            <option value="">-- Select Currency --</option>
            @foreach (var currency in currencies)
            {
                <option value="@currency.CurrencyCode">@currency.DisplayText</option>
            }
        </select>
        @if (isLoadingCurrencies)
        {
            <small class="text-muted">Loading currencies...</small>
        }
        else if (!currencies.Any())
        {
            <small class="text-warning">No currencies available</small>
        }
    </div>
</div>

@* Authorisation to *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Authorisation to
        @if (Model.IsFieldMandatory("Authorisation"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.Authorisation"
               @bind:after="OnFieldChanged"
               maxlength="255"
               disabled="@(IsReadOnly || Model.IsFieldDisabled("Authorisation"))"
               placeholder="Enter authorisation" />
    </div>
</div>

@* Bank Confirmation *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Bank Confirmation
        @if (Model.IsFieldMandatory("BankConfirmation"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.BankConfirmation"
                         @bind-Value:after="OnFieldChanged"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("BankConfirmation"))"
                         Label="Bank Confirmation" />
    </div>
</div>

<style>
    .required {
        color: red;
    }
</style>

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Pre-loaded currencies (passed from parent for performance)
    /// </summary>
    [Parameter]
    public List<CurrencyDto> Currencies { get; set; } = new();

    /// <summary>
    /// Event callback when component finishes loading
    /// </summary>
    [Parameter]
    public EventCallback OnLoadComplete { get; set; }

    // Internal state for document names
    private List<DocumentNameDto> documentNames = new();
    private bool isLoadingDocumentNames = false;
    private int? previousDocumentTypeId;

    // Internal state for currencies
    private List<CurrencyDto> currencies = new();
    private bool isLoadingCurrencies = false;

    protected override async Task OnInitializedAsync()
    {
        // Use pre-loaded currencies from parent (no async loading needed)
        currencies = Currencies;
        Logger.LogInformation("Using {Count} pre-loaded currencies", currencies.Count);

        // Load document names (depends on DocumentTypeId, so must be loaded per-document)
        await LoadDocumentNames();

        // Signal parent that this component has completed initialization
        await OnLoadComplete.InvokeAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload document names if DocumentTypeId changed
        if (Model.DocumentTypeId != previousDocumentTypeId)
        {
            previousDocumentTypeId = Model.DocumentTypeId;
            await LoadDocumentNames();
        }
    }

    private async Task LoadDocumentNames()
    {
        if (!Model.DocumentTypeId.HasValue)
        {
            documentNames.Clear();
            return;
        }

        try
        {
            isLoadingDocumentNames = true;
            Logger.LogInformation("Loading document names for DocumentTypeId {DocumentTypeId}", Model.DocumentTypeId);

            documentNames = await DocumentNameService.GetByDocumentTypeIdAsync(Model.DocumentTypeId.Value);

            Logger.LogInformation("Loaded {Count} document names", documentNames.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading document names for DocumentTypeId {DocumentTypeId}", Model.DocumentTypeId);
            documentNames.Clear();
        }
        finally
        {
            isLoadingDocumentNames = false;
        }
    }

    private async Task OnFieldChanged()
    {
        await ModelChanged.InvokeAsync(Model);
    }
}
