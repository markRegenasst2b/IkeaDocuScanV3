@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared
@using IkeaDocuScan.Shared.DTOs.Documents
@using IkeaDocuScan.Shared.DTOs.DocumentNames
@using IkeaDocuScan.Shared.DTOs.Currencies
@using IkeaDocuScan.Shared.Interfaces
@inject ILogger<AdditionalInfoFields> Logger
@inject IDocumentNameService DocumentNameService
@inject ICurrencyService CurrencyService

@* Document Name *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Document Name</label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.DocumentNameId" disabled="@IsReadOnly">
            <option value="">-- Select Document Name --</option>
            @foreach (var docName in documentNames)
            {
                <option value="@docName.Id">@docName.Name</option>
            }
        </select>
        @if (isLoadingDocumentNames)
        {
            <small class="text-muted">Loading document names...</small>
        }
        else if (Model.DocumentTypeId.HasValue && !documentNames.Any())
        {
            <small class="text-muted">No document names available for this type</small>
        }
    </div>
</div>

@* Document No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Document No.<span class="required">*</span></label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.DocumentNo"
               maxlength="255"
               disabled="@IsReadOnly"
               placeholder="Enter document number" />
    </div>
</div>

@* Version No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Version No.<span class="required">*</span></label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.VersionNo"
               maxlength="255"
               disabled="@IsReadOnly"
               placeholder="Enter version number" />
    </div>
</div>

@* Associated to PUA/Agreement No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Assoc. to PUA/Agr. No.</label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.AssociatedToPUA"
               maxlength="255"
               disabled="@IsReadOnly"
               placeholder="Enter PUA/Agreement number" />
    </div>
</div>

@* Associated to Appendix No. *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Assoc. to Appendix No.</label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.AssociatedToAppendix"
               maxlength="255"
               disabled="@IsReadOnly"
               placeholder="Enter appendix number" />
    </div>
</div>

@* Valid Until/As Of *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Valid Until/As Of</label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ValidUntil"
                           Disabled="@IsReadOnly"
                           Label="Valid Until/As Of"
                           Class="compact-date" />
    </div>
</div>

@* Amount *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Amount</label>
    <div class="col-sm-9">
        <input type="number"
               class="form-control"
               style="max-width: 10em;"
               @bind="Model.Amount"
               disabled="@IsReadOnly"
               placeholder="0.00"
               step="0.01" />
        <small class="text-muted">If Amount is entered, Currency must be selected</small>
    </div>
</div>

@* Currency *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Currency
        @if (Model.Amount.HasValue)
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.CurrencyCode" disabled="@IsReadOnly">
            <option value="">-- Select Currency --</option>
            @foreach (var currency in currencies)
            {
                <option value="@currency.CurrencyCode">@currency.DisplayText</option>
            }
        </select>
        @if (isLoadingCurrencies)
        {
            <small class="text-muted">Loading currencies...</small>
        }
        else if (!currencies.Any())
        {
            <small class="text-warning">No currencies available</small>
        }
    </div>
</div>

@* Authorisation to *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Authorisation to</label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.Authorisation"
               maxlength="255"
               disabled="@IsReadOnly"
               placeholder="Enter authorisation" />
    </div>
</div>

@* Bank Confirmation *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Bank Confirmation<span class="required">*</span></label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.BankConfirmation"
                         Disabled="@IsReadOnly"
                         Label="Bank Confirmation" />
    </div>
</div>

<style>
    .required {
        color: red;
    }
</style>

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    // Internal state for document names
    private List<DocumentNameDto> documentNames = new();
    private bool isLoadingDocumentNames = false;
    private int? previousDocumentTypeId;

    // Internal state for currencies
    private List<CurrencyDto> currencies = new();
    private bool isLoadingCurrencies = false;

    protected override async Task OnInitializedAsync()
    {
        // Load dropdowns sequentially to avoid DbContext concurrency issues
        await LoadCurrencies();
        await LoadDocumentNames();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload document names if DocumentTypeId changed
        if (Model.DocumentTypeId != previousDocumentTypeId)
        {
            previousDocumentTypeId = Model.DocumentTypeId;
            await LoadDocumentNames();
        }
    }

    private async Task LoadDocumentNames()
    {
        if (!Model.DocumentTypeId.HasValue)
        {
            documentNames.Clear();
            return;
        }

        try
        {
            isLoadingDocumentNames = true;
            Logger.LogInformation("Loading document names for DocumentTypeId {DocumentTypeId}", Model.DocumentTypeId);

            documentNames = await DocumentNameService.GetByDocumentTypeIdAsync(Model.DocumentTypeId.Value);

            Logger.LogInformation("Loaded {Count} document names", documentNames.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading document names for DocumentTypeId {DocumentTypeId}", Model.DocumentTypeId);
            documentNames.Clear();
        }
        finally
        {
            isLoadingDocumentNames = false;
        }
    }

    private async Task LoadCurrencies()
    {
        try
        {
            isLoadingCurrencies = true;
            Logger.LogInformation("Loading currencies");

            currencies = await CurrencyService.GetAllAsync();

            Logger.LogInformation("Loaded {Count} currencies", currencies.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading currencies");
            currencies.Clear();
        }
        finally
        {
            isLoadingCurrencies = false;
        }
    }
}
