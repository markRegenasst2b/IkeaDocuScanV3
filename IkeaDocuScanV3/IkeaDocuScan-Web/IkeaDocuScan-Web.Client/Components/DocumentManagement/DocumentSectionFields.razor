@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared
@using IkeaDocuScan.Shared.DTOs.DocumentTypes
@using IkeaDocuScan.Shared.DTOs.CounterParties
@using IkeaDocuScan.Shared.Interfaces
@inject IDocumentTypeService DocumentTypeService
@inject ICounterPartyService CounterPartyService
@inject ILogger<DocumentSectionFields> Logger

@* Document Type *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Document Type<span class="required">*</span></label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.DocumentTypeId" disabled="@IsReadOnly">
            <option value="">-- Select Document Type --</option>
            @foreach (var dt in documentTypes)
            {
                <option value="@dt.DtId">@dt.DtName</option>
            }
        </select>
    </div>
</div>

@* Counterparty No. (Alpha) *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Counterparty No.</label>
    <div class="col-sm-9">
        <input type="text"
               class="form-control compact-input"
               @bind="Model.CounterPartyNoAlpha"
               disabled="@IsReadOnly"
               placeholder="Enter counterparty number"
               @onblur="OnCounterPartyNoBlur" />
    </div>
</div>

@* Counterparty Dropdown *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Counterparty<span class="required">*</span></label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown"
                @bind="Model.CounterPartyId"
                @bind:after="OnCounterPartyChanged"
                disabled="@IsReadOnly">
            <option value="">-- Select Counterparty --</option>
            @foreach (var cp in counterParties)
            {
                <option value="@cp.CounterPartyId">@cp.Name</option>
            }
        </select>
    </div>
</div>

@* Location (Read-only) *@
<ReadOnlyField Label="Location" Value="@Model.Location" />

@* Affiliated To (Read-only) *@
<ReadOnlyField Label="Affiliated to" Value="@Model.AffiliatedTo" />

@* Third Parties Selector *@
<ThirdPartySelector @bind-SelectedThirdPartyIds="@Model.SelectedThirdPartyIds"
                   @bind-SelectedThirdPartyNames="@Model.SelectedThirdPartyNames"
                   Disabled="@IsReadOnly"
                   FilterByCounterPartyId="@Model.CounterPartyId" />

@* Date of Contract *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Date of Contract<span class="required">*</span></label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.DateOfContract"
                           Disabled="@IsReadOnly"
                           Label="Date of Contract"
                           Class="compact-date" />
    </div>
</div>

@* Receiving Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Receiving Date<span class="required">*</span></label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ReceivingDate"
                           Disabled="@IsReadOnly"
                           Label="Receiving Date"
                           Class="compact-date" />
    </div>
</div>

@* Sending Out Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Sending Out Date<span class="required">*</span></label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.SendingOutDate"
                           Disabled="@IsReadOnly"
                           Label="Sending Out Date"
                           Class="compact-date" />
    </div>
</div>

@* Forwarded To Signatories Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Fwd. to Signatories Date<span class="required">*</span></label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ForwardedToSignatoriesDate"
                           Disabled="@IsReadOnly"
                           Label="Forwarded To Signatories Date"
                           Class="compact-date" />
    </div>
</div>

@* Dispatch Date (Conditional) *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Dispatch Date
        @if (Model.IsDispatchDateEnabled)
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.DispatchDate"
                           Disabled="@(!Model.IsDispatchDateEnabled || IsReadOnly)"
                           Label="Dispatch Date"
                           Class="compact-date" />
        @if (!Model.IsDispatchDateEnabled)
        {
            <small class="text-muted">(Disabled in Register mode)</small>
        }
    </div>
</div>

@* Comment *@
<div class="mb-3">
    <label class="form-label">Comment <span class="required">*</span></label>
    <textarea class="form-control"
              @bind="Model.Comment"
              rows="3"
              maxlength="255"
              disabled="@IsReadOnly"
              placeholder="Enter comment (max 255 characters)"></textarea>
    @if (!string.IsNullOrEmpty(Model.Comment))
    {
        <small class="text-muted">@Model.Comment.Length / 255 characters</small>
    }
</div>

<style>
    .required {
        color: red;
    }
</style>

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    private List<DocumentTypeDto> documentTypes = new();
    private List<CounterPartyDto> counterParties = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupData();
    }

    private async Task LoadLookupData()
    {
        try
        {
            // Load document types
            documentTypes = await DocumentTypeService.GetAllAsync();
            Logger.LogInformation("Loaded {Count} document types", documentTypes.Count);

            // Load counter parties
            counterParties = await CounterPartyService.GetAllAsync();
            Logger.LogInformation("Loaded {Count} counter parties", counterParties.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading lookup data");
        }
    }

    private async Task OnCounterPartyNoBlur()
    {
        if (string.IsNullOrWhiteSpace(Model.CounterPartyNoAlpha))
            return;

        try
        {
            // Search for counter party by alpha-numeric code
            var results = await CounterPartyService.SearchAsync(Model.CounterPartyNoAlpha);
            var counterParty = results.FirstOrDefault(cp =>
                cp.CounterPartyNoAlpha?.Equals(Model.CounterPartyNoAlpha, StringComparison.OrdinalIgnoreCase) == true);

            if (counterParty != null)
            {
                Model.CounterPartyId = counterParty.CounterPartyId.ToString();
                Model.CounterPartyName = counterParty.Name;
                Model.Location = $"{counterParty.City}, {counterParty.Country}";
                Model.AffiliatedTo = counterParty.AffiliatedTo;

                Logger.LogInformation("Auto-populated counter party: {Name}", counterParty.Name);
                await ModelChanged.InvokeAsync(Model);
            }
            else
            {
                Logger.LogWarning("Counter party not found for code: {Code}", Model.CounterPartyNoAlpha);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error looking up counter party by code: {Code}", Model.CounterPartyNoAlpha);
        }
    }

    private async Task OnCounterPartyChanged()
    {
        if (string.IsNullOrWhiteSpace(Model.CounterPartyId))
        {
            Model.CounterPartyNoAlpha = null;
            Model.CounterPartyName = null;
            Model.Location = null;
            Model.AffiliatedTo = null;
        }
        else
        {
            var counterParty = counterParties.FirstOrDefault(cp => cp.CounterPartyId == int.Parse(Model.CounterPartyId ?? "-1"));
            if (counterParty != null)
            {
                Model.CounterPartyNoAlpha = counterParty.CounterPartyNoAlpha;
                Model.CounterPartyName = counterParty.Name;
                Model.Location = $"{counterParty.City}, {counterParty.Country}";
                Model.AffiliatedTo = counterParty.AffiliatedTo;

                Logger.LogInformation("Counter party changed to: {Name}", counterParty.Name);
            }
        }

        await ModelChanged.InvokeAsync(Model);
    }
}
