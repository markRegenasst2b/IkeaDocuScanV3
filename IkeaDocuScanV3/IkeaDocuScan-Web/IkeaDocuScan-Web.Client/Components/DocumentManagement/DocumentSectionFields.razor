@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared
@using IkeaDocuScan.Shared.DTOs.DocumentTypes
@using IkeaDocuScan.Shared.DTOs.CounterParties
@using IkeaDocuScan.Shared.Interfaces
@inject ILogger<DocumentSectionFields> Logger

@* Document Type *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Document Type<span class="required">*</span></label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.DocumentTypeId" @bind:after="OnDocumentTypeChanged" disabled="@IsReadOnly">
            <option value="">-- Select Document Type --</option>
            @foreach (var dt in documentTypes)
            {
                <option value="@dt.DtId">@dt.DtName</option>
            }
        </select>
    </div>
</div>

@* Counterparty Selector *@
<div class="mb-3">
    <CounterPartySelector @bind-SelectedCounterPartyId="@Model.CounterPartyId"
                         OnCounterPartySelected="@OnCounterPartySelectedFromSelector"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("CounterParty"))"
                         CounterParties="@CounterParties"
                         OnLoadComplete="@OnLoadComplete" />
</div>

@* Third Parties Selector *@
<ThirdPartySelector @bind-SelectedThirdPartyIds="@Model.SelectedThirdPartyIds"
                   @bind-SelectedThirdPartyIds:after="OnThirdPartiesChanged"
                   @bind-SelectedThirdPartyNames="@Model.SelectedThirdPartyNames"
                   Disabled="@IsReadOnly"
                   FilterByCounterPartyId="@Model.CounterPartyId"
                   CounterParties="@CounterParties"
                   OnLoadComplete="@OnLoadComplete" />

@* Date of Contract *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Date of Contract
        @if (Model.IsFieldMandatory("DateOfContract"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.DateOfContract"
                           @bind-Value:after="OnDateChanged"
                           Disabled="@(IsReadOnly || Model.IsFieldDisabled("DateOfContract"))"
                           Label="Date of Contract"
                           Class="compact-date" />
    </div>
</div>

@* Receiving Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Receiving Date
        @if (Model.IsFieldMandatory("ReceivingDate"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ReceivingDate"
                           @bind-Value:after="OnDateChanged"
                           Disabled="@(IsReadOnly || Model.IsFieldDisabled("ReceivingDate"))"
                           Label="Receiving Date"
                           Class="compact-date" />
    </div>
</div>

@* Sending Out Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Sending Out Date
        @if (Model.IsFieldMandatory("SendingOutDate"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.SendingOutDate"
                           @bind-Value:after="OnDateChanged"
                           Disabled="@(IsReadOnly || Model.IsFieldDisabled("SendingOutDate"))"
                           Label="Sending Out Date"
                           Class="compact-date" />
    </div>
</div>

@* Forwarded To Signatories Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Fwd. to Signatories Date
        @if (Model.IsFieldMandatory("ForwardedToSignatoriesDate"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ForwardedToSignatoriesDate"
                           @bind-Value:after="OnDateChanged"
                           Disabled="@(IsReadOnly || Model.IsFieldDisabled("ForwardedToSignatoriesDate"))"
                           Label="Forwarded To Signatories Date"
                           Class="compact-date" />
    </div>
</div>

@* Dispatch Date (Conditional) *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Dispatch Date
        @if (Model.IsDispatchDateEnabled && Model.IsFieldMandatory("DispatchDate"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.DispatchDate"
                           @bind-Value:after="OnDateChanged"
                           Disabled="@(!Model.IsDispatchDateEnabled || IsReadOnly || Model.IsFieldDisabled("DispatchDate"))"
                           Label="Dispatch Date"
                           Class="compact-date" />
        @if (!Model.IsDispatchDateEnabled)
        {
            <small class="text-muted">(Disabled in Register mode)</small>
        }
    </div>
</div>

@* Comment *@
<div class="mb-3">
    <label class="form-label">
        Comment
        @if (Model.IsFieldMandatory("Comment"))
        {
            <span class="required">*</span>
        }
    </label>
    <textarea class="form-control"
              @bind="Model.Comment"
              @bind:after="OnCommentChanged"
              rows="3"
              maxlength="255"
              disabled="@(IsReadOnly || Model.IsFieldDisabled("Comment"))"
              placeholder="Enter comment (max 255 characters)"></textarea>
    @if (!string.IsNullOrEmpty(Model.Comment))
    {
        <small class="text-muted">@Model.Comment.Length / 255 characters</small>
    }
</div>

<style>
    .required {
        color: red;
    }
</style>

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Pre-loaded document types (passed from parent for performance)
    /// </summary>
    [Parameter]
    public List<DocumentTypeDto> DocumentTypes { get; set; } = new();

    /// <summary>
    /// Pre-loaded counter parties (passed from parent for performance)
    /// </summary>
    [Parameter]
    public List<CounterPartyDto> CounterParties { get; set; } = new();

    /// <summary>
    /// Event callback when component finishes loading
    /// </summary>
    [Parameter]
    public EventCallback OnLoadComplete { get; set; }

    private List<DocumentTypeDto> documentTypes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("ðŸ”§ DocumentSectionFields.OnInitializedAsync START");

            // Use pre-loaded data from parent (no async loading needed)
            documentTypes = DocumentTypes;
            Logger.LogInformation("Using {Count} pre-loaded document types", documentTypes.Count);

            // Signal parent that this component has completed initialization (immediate)
            Logger.LogInformation("ðŸ”§ DocumentSectionFields invoking OnLoadComplete callback");
            await OnLoadComplete.InvokeAsync();
            Logger.LogInformation("ðŸ”§ DocumentSectionFields.OnInitializedAsync COMPLETE");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ðŸ”§ DocumentSectionFields.OnInitializedAsync FAILED");
            throw;
        }
    }

    private async Task OnCounterPartySelectedFromSelector(CounterPartyDto? counterParty)
    {
        if (counterParty == null)
        {
            Model.CounterPartyId = null;
            Model.CounterPartyNoAlpha = null;
            Model.CounterPartyName = null;
            Model.Location = null;
            Model.AffiliatedTo = null;
        }
        else
        {
            Model.CounterPartyId = counterParty.CounterPartyId.ToString();
            Model.CounterPartyNoAlpha = counterParty.CounterPartyNoAlpha;
            Model.CounterPartyName = counterParty.Name;
            Model.Location = $"{counterParty.City}, {counterParty.Country}";
            Model.AffiliatedTo = counterParty.AffiliatedTo;

            Logger.LogInformation("Counter party selected: {Name}", counterParty.Name);
        }

        await ModelChanged.InvokeAsync(Model);
    }

    private async Task OnThirdPartiesChanged()
    {
        Logger.LogInformation("Third parties changed, notifying parent");
        await ModelChanged.InvokeAsync(Model);
    }

    private async Task OnDateChanged()
    {
        Logger.LogInformation("Date changed, notifying parent");
        await ModelChanged.InvokeAsync(Model);
    }

    private async Task OnDocumentTypeChanged()
    {
        Logger.LogInformation("Document type changed, notifying parent");
        await ModelChanged.InvokeAsync(Model);
    }

    private async Task OnCommentChanged()
    {
        Logger.LogInformation("Comment changed, notifying parent");
        await ModelChanged.InvokeAsync(Model);
    }
}
