@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared

@* Fax *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Fax
        @if (Model.IsFieldMandatory("Fax"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.Fax"
                         @bind-Value:after="OnFieldChanged"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("Fax"))"
                         Label="Fax" />
    </div>
</div>

@* Original Received *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Original Received
        @if (Model.IsFieldMandatory("OriginalReceived"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.OriginalReceived"
                         @bind-Value:after="OnFieldChanged"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("OriginalReceived"))"
                         Label="Original Received" />
    </div>
</div>

@* Translation Received *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Translation Received
        @if (Model.IsFieldMandatory("TranslatedVersionReceived"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.TranslationReceived"
                         @bind-Value:after="OnFieldChanged"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("TranslatedVersionReceived"))"
                         Label="Translation Received" />
    </div>
</div>

@* Confidential *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">
        Confidential
        @if (Model.IsFieldMandatory("Confidential"))
        {
            <span class="required">*</span>
        }
    </label>
    <div class="col-sm-9">
        <TriStateDropdown @bind-Value="@Model.Confidential"
                         @bind-Value:after="OnFieldChanged"
                         Disabled="@(IsReadOnly || Model.IsFieldDisabled("Confidential"))"
                         Label="Confidential" />
    </div>
</div>

<style>
    .required {
        color: red;
    }
</style>

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Event callback when component finishes loading
    /// </summary>
    [Parameter]
    public EventCallback OnLoadComplete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // This component has no async initialization, signal completion immediately
        await OnLoadComplete.InvokeAsync();
    }

    private async Task OnFieldChanged()
    {
        await ModelChanged.InvokeAsync(Model);
    }
}
