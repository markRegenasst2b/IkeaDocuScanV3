@using IkeaDocuScan_Web.Client.Models
@using IkeaDocuScan_Web.Client.Components.Shared

@* Action Date *@
<div class="row mb-3 field-horizontal">
    <label class="col-sm-3 col-form-label text-end">Action Date</label>
    <div class="col-sm-9">
        <DocumentDatePicker @bind-Value="@Model.ActionDate"
                           @bind-Value:after="OnFieldChanged"
                           Disabled="@IsReadOnly"
                           Label="Action Date"
                           Class="compact-date" />
        <small class="text-muted">If any action field is filled, all must be filled</small>
    </div>
</div>

@* Action Description *@
<div class="mb-3">
    <label class="form-label">Action Description</label>
    <textarea class="form-control"
              @bind="Model.ActionDescription"
              @bind:after="OnFieldChanged"
              rows="3"
              maxlength="255"
              disabled="@IsReadOnly"
              placeholder="Enter action description (max 255 characters)"></textarea>
    @if (!string.IsNullOrEmpty(Model.ActionDescription))
    {
        <small class="text-muted">@Model.ActionDescription.Length / 255 characters</small>
    }
</div>

@* Email Reminder Group (Hidden by default, can be enabled via DocumentType) *@
<div class="row mb-3 field-horizontal" style="display: none;">
    <label class="col-sm-3 col-form-label text-end">E-Mail Reminder Group</label>
    <div class="col-sm-9">
        <select class="form-select compact-dropdown" @bind="Model.EmailReminderGroup" disabled="@IsReadOnly">
            <option value="">-- Select Group --</option>
            @* TODO: Load from LDAP/Active Directory *@
        </select>
    </div>
</div>

@* Distribution List Label (Read-only display) *@
@if (!string.IsNullOrEmpty(Model.DistributionListLabel))
{
    <ReadOnlyField Label="Distribution List" Value="@Model.DistributionListLabel" />
}

@code {
    /// <summary>
    /// The document properties model
    /// </summary>
    [Parameter, EditorRequired]
    public DocumentPropertiesViewModel Model { get; set; } = new();

    /// <summary>
    /// Event callback when model changes
    /// </summary>
    [Parameter]
    public EventCallback<DocumentPropertiesViewModel> ModelChanged { get; set; }

    /// <summary>
    /// Whether the fields are read-only
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; }

    private async Task OnFieldChanged()
    {
        await ModelChanged.InvokeAsync(Model);
    }
}
